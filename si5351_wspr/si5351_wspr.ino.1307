/* WSPR с использованием библиотеки JTEncode
 * Si5351 + DS1307
*/

#include <si5351.h>
#include <JTEncode.h>
#include <rs_common.h>
#include <int.h>
#include <string.h>
#include "Wire.h"
#include <TimeLib.h>
#include <DS1307RTC.h>

Si5351 si5351;
JTEncode jtencode;
tmElements_t tm;

//#define WSPR_FREQ        136000UL // 136 kHz
//#define WSPR_FREQ        474200UL // 474.2 kHz
//#define WSPR_FREQ       1836600UL // 1.8366 MHz
#define WSPR_FREQ_80       3570010UL // 3.5686 MHz
#define WSPR_FREQ_40       7040095UL // 7.0386 MHz
#define WSPR_FREQ_30      10140140UL // 10.1387 MHz
#define WSPR_FREQ_20      14097030UL // 14.0956 MHz
#define WSPR_FREQ_17      18106100UL // 18.1046 MHz
//#define WSPR_FREQ      21094600UL // 21.0946 MHz 
//#define WSPR_FREQ      24924600UL // 24.9246 MHz
//#define WSPR_FREQ      28124600UL // 28.1246 MHz
//#define WSPR_FREQ      50294500UL // 50.2930 MHz (Region 2, 3)
//#define WSPR_FREQ      70091000UL // 70.0910 MHz (Region 1)
//#define WSPR_FREQ      70151000UL // 70.1510 MHz
//#define WSPR_FREQ     144489000UL // 144.4890 MHz

#define LED_PIN                13

unsigned long freq, freq_band;
char call[] = "UR5RBJ";
char loc[] = "KO51";
uint8_t dbm = 30; // 10*log10(P,mw)
uint8_t tx_buffer[255];
uint8_t symbol_count;
uint16_t tone_delay, tone_spacing;
int32_t cal_factor = 100; // 100-200 - с TCXO; 258900 - самодельный маленький; 234200 - самодельный с фильтрами; 90680 - готовый китайский модуль на wspr;
unsigned int band = 20;

void encode() {
  si5351.output_enable(SI5351_CLK0, 1);
  digitalWrite(LED_PIN, HIGH);
  switch (band) { //band hop
    case 20: {
      freq_band = WSPR_FREQ_20;
      band = 30;
    } break;
    case 30: {
      freq_band = WSPR_FREQ_30;
      band = 40;
    } break;
    case 40: {
      freq_band = WSPR_FREQ_40;
      band = 80;
    } break;
    case 80: {
      freq_band = WSPR_FREQ_80;
      band = 17;
    } break;
    case 17: {
      freq_band = WSPR_FREQ_17;
      band = 20;
    } break;
  }
  for(uint8_t i = 0; i < WSPR_SYMBOL_COUNT; i++) {
    freq = (freq_band * 100) + (tx_buffer[i] * 146);
    si5351.set_freq(freq, SI5351_CLK0);
    delay(683);
  }

  si5351.output_enable(SI5351_CLK0, 0);
  digitalWrite(LED_PIN, LOW);
}

void set_tx_buffer() {
  memset(tx_buffer, 0, 255);
  jtencode.wspr_encode(call, loc, dbm, tx_buffer);
}

void setup() {
  Serial.begin(115200);
  si5351.update_status();
  if (si5351.dev_status.SYS_INIT == 1)
  {
     delay(500);
  }
  si5351.init(SI5351_CRYSTAL_LOAD_8PF, 0, 0);
  si5351.set_correction(cal_factor, SI5351_PLL_INPUT_XO);
  si5351.set_pll(SI5351_PLL_FIXED, SI5351_PLLA);

  si5351.drive_strength(SI5351_CLK0, SI5351_DRIVE_8MA); // Set for max power if desired
  si5351.output_enable(SI5351_CLK0, 0); // Disable the clock initially

  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  set_tx_buffer();
  Serial.println("Setup OK");
}

void loop() {
  if (RTC.read(tm)) {
    if (!(tm.Minute % 2 ) && (tm.Second == 1 )) { //передача с первой секунды чётной минуты
      encode();
    }
  }
}
